name: Update Latest Substack Articles

on:
  schedule:
    - cron: '0 */6 * * *' # Runs every 6 hours
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/update-substack.yml'

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest 5 Substack posts
        run: |
          echo "Using RSS parser script to fetch latest articles"

          # Make sure the script is executable
          chmod +x parse_rss.sh

          # Run the RSS parser script and capture output
          if ./parse_rss.sh > articles.txt 2> rss_debug.log; then
            echo "RSS parsing succeeded"
            echo "=== Debug output ==="
            cat rss_debug.log
            echo "=== Articles found ==="
            cat articles.txt
            echo "=== End articles ==="
          else
            echo "RSS parsing failed, using fallback articles"
            echo "=== Debug output ==="
            cat rss_debug.log || echo "No debug log available"
            echo "=== Using fallback ==="

            # Fallback to hardcoded articles
            echo "- [Building AI-Native FinOps: From Chat Outputs to Actionable Interfaces](https://peterlimg.substack.com/p/building-ai-native-finops-from-chat)" > articles.txt
            echo "- [Rethinking Technical Debt: How AI Changed the Way We Maintain Software](https://peterlimg.substack.com/p/rethinking-technical-debt-how-ai)" >> articles.txt
            echo "- [Why Streaming Plans in Real Time Was Worth the Architecture Overhaul](https://peterlimg.substack.com/p/back-to-building-real-time-streaming)" >> articles.txt
            echo "- [Making AI Optimization Feel Natural](https://peterlimg.substack.com/p/making-ai-optimization-feel-natural)" >> articles.txt
            echo "- [When You're Too Deep in Code to Write About It](https://peterlimg.substack.com/p/when-youre-too-deep-in-code-to-write)" >> articles.txt
          fi

          # Verify articles.txt has content
          if [ ! -s articles.txt ]; then
            echo "ERROR: articles.txt is empty, this should not happen"
            exit 1
          fi

      - name: Update README
        run: |
          # Debug: Check if articles.txt was created and has content
          echo "=== Debug: articles.txt content ==="
          ls -la articles.txt || echo "articles.txt not found"
          cat articles.txt || echo "articles.txt is empty"
          echo "=== End Debug ==="
          
          # Use a simpler approach with sed and temp files
          # Split README into before, articles, and after sections
          
          # Get content before the START marker
          sed '/<!-- SUBSTACK:START -->/,$d' README.md > before.tmp
          
          # Get content after the END marker  
          sed -n '/<!-- SUBSTACK:END -->/,$p' README.md > after.tmp
          
          # Combine: before + start marker + articles + end marker + after
          cat before.tmp > README.tmp
          echo "<!-- SUBSTACK:START -->" >> README.tmp
          cat articles.txt >> README.tmp
          cat after.tmp >> README.tmp
          
          # Debug: Show differences
          echo "=== Debug: README diff ==="
          diff README.md README.tmp || echo "Files differ (this is expected)"
          echo "=== End Debug ==="
          
          # Replace original README
          mv README.tmp README.md
          
          # Cleanup
          rm -f before.tmp after.tmp

      - name: Commit and Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update latest Substack articles in README"
          file_pattern: README.md