name: Update Latest Substack Articles

on:
  schedule:
    - cron: '0 */6 * * *' # Runs every 6 hours
  workflow_dispatch: # Allows manual triggering
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch latest 5 Substack posts
        run: |
          RSS_URL="https://peterlimg.substack.com/feed"
          
          # Use a more robust approach with xmllint for XML cleanup
          curl -s -A "Mozilla/5.0 (compatible; RSS Reader)" "$RSS_URL" | \
          python3 -c "
          import sys
          import re
          from datetime import datetime
          
          # Read raw RSS content
          content = sys.stdin.read()
          print(f'DEBUG: Content length: {len(content)}', file=sys.stderr)
          
          # Extract items using regex (more reliable than XML parsing for malformed feeds)
          item_pattern = r'<item>(.*?)</item>'
          items = re.findall(item_pattern, content, re.DOTALL)
          print(f'DEBUG: Found {len(items)} items', file=sys.stderr)
          
          articles_written = 0
          with open('articles.txt', 'w') as f:
              for i, item in enumerate(items[:5]):
                  print(f'DEBUG: Processing item {i+1}', file=sys.stderr)
                  
                  # Extract title
                  title_match = re.search(r'<title><!\[CDATA\[(.*?)\]\]></title>', item)
                  if not title_match:
                      title_match = re.search(r'<title>(.*?)</title>', item)
                  
                  # Extract link
                  link_match = re.search(r'<link>(.*?)</link>', item)
                  
                  # Extract pubDate
                  pubdate_match = re.search(r'<pubDate>(.*?)</pubDate>', item)
                  
                  if title_match and link_match:
                      title = title_match.group(1).strip()
                      link = link_match.group(1).strip()
                      pubdate = pubdate_match.group(1).strip() if pubdate_match else ''
                      
                      print(f'DEBUG: Title: {title[:50]}...', file=sys.stderr)
                      print(f'DEBUG: Link: {link}', file=sys.stderr)
                      
                      # Format date
                      try:
                          # Remove timezone info for parsing
                          date_str = re.sub(r' [A-Z]{3}$', '', pubdate)
                          date_obj = datetime.strptime(date_str, '%a, %d %b %Y %H:%M:%S')
                          formatted_date = date_obj.strftime('%B %d, %Y')
                      except Exception as e:
                          print(f'DEBUG: Date parsing failed: {e}', file=sys.stderr)
                          formatted_date = pubdate
                      
                      article_line = f'- [{title}]({link}) - *{formatted_date}*\n'
                      f.write(article_line)
                      articles_written += 1
                      print(f'DEBUG: Wrote article {articles_written}', file=sys.stderr)
                  else:
                      print(f'DEBUG: Skipping item {i+1} - missing title or link', file=sys.stderr)
              
              print(f'DEBUG: Total articles written: {articles_written}', file=sys.stderr)
          "

      - name: Update README
        run: |
          # Debug: Check if articles.txt was created and has content
          echo "=== Debug: articles.txt content ==="
          ls -la articles.txt || echo "articles.txt not found"
          cat articles.txt || echo "articles.txt is empty"
          echo "=== End Debug ==="
          
          # Use a simpler approach with sed and temp files
          # Split README into before, articles, and after sections
          
          # Get content before the START marker
          sed '/<!-- SUBSTACK:START -->/,$d' README.md > before.tmp
          
          # Get content after the END marker  
          sed -n '/<!-- SUBSTACK:END -->/,$p' README.md > after.tmp
          
          # Combine: before + start marker + articles + end marker + after
          cat before.tmp > README.tmp
          echo "<!-- SUBSTACK:START -->" >> README.tmp
          cat articles.txt >> README.tmp
          cat after.tmp >> README.tmp
          
          # Debug: Show differences
          echo "=== Debug: README diff ==="
          diff README.md README.tmp || echo "Files differ (this is expected)"
          echo "=== End Debug ==="
          
          # Replace original README
          mv README.tmp README.md
          
          # Cleanup
          rm -f before.tmp after.tmp

      - name: Commit and Push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update latest Substack articles in README"
          file_pattern: README.md